#+STARTUP: overview
#+TITLE: myemacs
#+CREATOR: abhishek anand amralkar
#+LANGUAGE: en
#+OPTIONS: num:nil
#+ATTR_HTML: :style margin-left: auto; margin-right: auto;
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mkdirp yes
#+auto_tangle: t

[[https://www.gnu.org/licenses/gpl-3.0][https://img.shields.io/badge/License-GPL%20v3-blue.svg]]

My Emacs configuration that is written in Org Mode. README.org generates init.el which Emacs loads up.

[[./images/emacs.png]]

* Installation
This section provides step-by-step instructions to set up the Emacs configuration, including installing Emacs, cloning the repository, and running the installation script.

To set up this Emacs configuration, follow these steps:

1. Install Emacs: Ensure you have Emacs installed on your system. You can download it from [GNU Emacs](https://www.gnu.org/software/emacs/) or use your system's package manager.

2. Install Git: Ensure `git` is installed on your system. Use your system's package manager to install it if necessary.

3. Clone the Configuration

   #+begin_src sh
   git clone git@github.com:abhishekamralkar/myemacs.git ~/.emacs.d
   #+end_src

4. Run the Installation Script

   Navigate to the cloned directory and execute the `install.sh` script to automate the setup process.

   #+begin_src sh
   cd ~/.emacs.d
   chmod +x install.sh
   ./install.sh
   #+end_src

5. Start Emacs

   Open Emacs, and it will automatically install the required packages using `straight.el`.

6. Verify Configuration

   Check if all packages are installed and working correctly.
   Use `M-x config-edit` to edit the configuration if needed.

* Package Manager
This section explains the use of `straight.el` for package management, ensuring reproducibility and ease of customization.

Use `straight.el` for the package management. Below code is from `straight.el` README.

#+begin_src emacs-lisp
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name
        "straight/repos/straight.el/bootstrap.el"
        (or (bound-and-true-p straight-base-dir)
            user-emacs-directory)))
      (bootstrap-version 7))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))
#+end_src

#+begin_src emacs-lisp
(setq package-enable-at-startup nil)
(require 'org-tempo)
(setq straight-use-package-by-default t)
(setq use-package-always-defer t)
#+end_src

With `auto-package-update` package, we can keep Emacs up to date.

#+begin_src emacs-lisp
(use-package auto-package-update
  :custom
  (auto-package-update-interval 7)
  (auto-package-update-prompt-before-update t)
  (auto-package-update-hide-results t)
  :config
  (auto-package-update-maybe)
  (auto-package-update-at-time "09:00"))
#+end_src

* Configuration
This section contains various configurations to optimize Emacs for performance and usability.

** GCMH
Garbage Collector Magic Hack minimizes garbage collection interference during user activity, improving performance.

#+begin_src emacs-lisp
(use-package gcmh
  :demand
  :config
  (gcmh-mode 1))
#+end_src

** Screen
This section customizes the Emacs UI by removing unnecessary elements like the toolbar, scrollbar, and splash screen.

#+begin_src emacs-lisp
(tool-bar-mode -1)             ; Hide the outdated icons
;;(scroll-bar-mode -1)           ; Hide the always-visible scrollbar
(menu-bar-mode -1)             ; Hide the menubar
(setq inhibit-splash-screen t) ; Remove the "Welcome to GNU Emacs" splash screen
(setq use-file-dialog nil)     ; Ask for textual confirmation instead of GUI
#+end_src

** UTF-8
Ensures that Emacs uses UTF-8 encoding for better compatibility and support for international text.

#+begin_src emacs-lisp
(use-package emacs
  :init
  (set-charset-priority 'unicode)
  (setq locale-coding-system 'utf-8
        coding-system-for-read 'utf-8
        coding-system-for-write 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
  (setq default-process-coding-system '(utf-8-unix . utf-8-unix)))
#+end_src

** Which-Key
`which-key` displays available keybindings for partially entered commands, making it easier to learn and use shortcuts.

#+begin_src emacs-lisp
(use-package which-key
  :ensure t
  :config
  (which-key-mode))
#+end_src

** No Backup
Disables backup and auto-save files to keep the working directory clean.

#+begin_src emacs-lisp
(setq make-backup-files nil)
(setq auto-save-default nil)
#+end_src

* Emacs UI
This section enhances the visual appearance of Emacs with a modern modeline, dashboard, and themes.

** Modeline
Uses `doom-modeline` to provide a clean and informative modeline.

#+begin_src emacs-lisp
(use-package doom-modeline
  :ensure t
  :init (doom-modeline-mode 1))
#+end_src

#+begin_src emacs-lisp
(use-package all-the-icons
  :ensure t)
#+end_src

#+begin_src emacs-lisp
(use-package nerd-icons
    :ensure t)
#+end_src

** Dashboard
Displays a customizable startup dashboard with recent files, bookmarks, and projects.

#+begin_src emacs-lisp
(use-package dashboard
  :ensure t
  :config
    (dashboard-setup-startup-hook))
#+end_src

#+begin_src emacs-lisp
(setq dashboard-banner-logo-title "Welcome to My Emacs ")
(setq dashboard-center-content t)
(setq dashboard-show-shortcuts nil)
(setq dashboard-items '((recents  . 5)
                        (bookmarks . 5)
                        (projects . 5)
                        (agenda . 5)
                        (registers . 5)))
#+end_src

** Theme
Configures themes and fonts for a visually appealing interface.

Using ef Emacs theme 

#+begin_src emacs-lisp
    (use-package ef-themes
      :ensure t
      :config
      (load-theme 'ef-owl :no-confirm))
#+end_src

Using FIRACODE Nerd fonts

#+begin_src emacs-lisp
(use-package emacs
  :init
  (set-face-attribute 'default nil 
    :font "FiraCode Nerd Font" 
    :height 160))
#+end_src


#+begin_src emacs-lisp
(use-package ligature
  :config
  (ligature-set-ligatures 't '("www"))
  ;; `variable-pitch' face
  (ligature-set-ligatures 'eww-mode '("ff" "fi" "ffi"))
  ;; Enable all Cascadia Code ligatures in programming modes
  (ligature-set-ligatures 'prog-mode '("|||>" "<|||" "<==>" "<!--" "####" "~~>" "***" "||=" "||>"
                                       ":::" "::=" "=:=" "===" "==>" "=!=" "=>>" "=<<" "=/=" "!=="
                                       "!!." ">=>" ">>=" ">>>" ">>-" ">->" "->>" "-->" "---" "-<<"
                                       "<~~" "<~>" "<*>" "<||" "<|>" "<$>" "<==" "<=>" "<=<" "<->"
                                       "<--" "<-<" "<<=" "<<-" "<<<" "<+>" "</>" "###" "#_(" "..<"
                                       "..." "+++" "/==" "///" "_|_" "www" "&&" "^=" "~~" "~@" "~="
                                       "~>" "~-" "**" "*>" "*/" "||" "|}" "|]" "|=" "|>" "|-" "{|"
                                       "[|" "]#" "::" ":=" ":>" ":<" "$>" "==" "=>" "!=" "!!" ">:"
                                       ">=" ">>" ">-" "-~" "-|" "->" "--" "-<" "<~" "<*" "<|" "<:"
                                       "<$" "<=" "<>" "<-" "<<" "<+" "</" "#{" "#[" "#:" "#=" "#!"
                                       "##" "#(" "#?" "#_" "%%" ".=" ".-" ".." ".?" "+>" "++" "?:"
                                       "?=" "?." "??" ";;" "/*" "/=" "/>" "//" "__" "~~" "(*" "*)"
                                       "\\\\" "://"))
  ;; Enables ligature checks globally in all buffers. You can also do it
  ;; per mode with `ligature-mode'.
  (global-ligature-mode t))
#+end_src

* Custom
This section includes custom functions and keybindings to personalize the Emacs experience.

** Reload
Defines a function to reload the configuration file.

#+begin_src emacs-lisp
(defun config-reload ()
  (interactive)
  (find-file "~/.emacs.d/init.el"))  
#+end_src

** Edit
Defines a function to open the configuration file for editing.

#+begin_src emacs-lisp
(defun config-edit ()
  (interactive)
  (find-file "~/.emacs.d/emacs.org"))
(global-set-key (kbd "C-c e") 'config-edit)
#+end_src

** Bindings
Custom keybindings for navigation and frequently used commands.

#+begin_src emacs-lisp
(global-set-key (kbd "M-<up>") 'beginning-of-buffer)
(global-set-key (kbd "M-<down>") 'end-of-buffer)
(global-set-key (kbd "C-c c") 'org-capture)
(global-set-key (kbd "C-c r") 'config-reload)
#+end_src

** Suppress Warning
Suppresses unnecessary warnings to reduce distractions.

#+begin_src emacs-lisp
(setq warning-minimum-level :emergency)
#+end_src

** Auto-Save
Configures auto-save settings to prevent data loss.

#+begin_src emacs-lisp
(setq auto-save-default t)
;; Set the interval between auto-saves based on time (in seconds)
(setq auto-save-timeout 10)  ;; Save every 20 seconds of idle time
#+end_src

** Auto-Refresh-Dired
Enables automatic refreshing of Dired buffers to reflect file changes.

#+begin_src emacs-lisp
(global-auto-revert-mode 1)
;; Also auto refresh dired, but be quiet about it
(setq global-auto-revert-non-file-buffers t)
(setq auto-revert-verbose nil)
#+end_src

* Tools
This section includes tools and packages to enhance productivity, such as syntax checking, snippet management, and Git integration.

** Show Parens
Highlights matching parentheses for better code readability.

#+begin_src emacs-lisp
(show-paren-mode 1)
#+end_src

** Rainbow Delimiter
Colors parentheses and other delimiters to improve code structure visibility.

#+begin_src emacs-lisp
(use-package rainbow-delimiters
   :ensure t
   :init
   (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))   
#+end_src

** Flycheck
Provides real-time syntax checking for multiple programming languages.

#+begin_src emacs-lisp
(use-package flycheck
  :init (global-flycheck-mode))
#+end_src

** Yasnippet
Manages code snippets for faster coding.

#+begin_src emacs-lisp
(use-package yasnippet
   :ensure t
   :config
     (use-package yasnippet-snippets
       :ensure t)
     (yas-reload-all))
#+end_src

** Magit
A powerful Git client for Emacs.

#+begin_src emacs-lisp
    (use-package magit
       :ensure t
       :bind ("C-x g" . magit))

  (use-package sqlite3
    :ensure t)
  
    (use-package forge
       :ensure t
       :after magit)
#+end_src

** Projectile
Simplifies project management and navigation.

#+begin_src emacs-lisp
(use-package projectile
   :ensure t
   :init
     (projectile-mode 1))
#+end_src

** General
Provides additional keybinding utilities.

#+begin_src emacs-lisp
(use-package general
   :ensure t)
#+end_src

** fzf
Integrates fuzzy file searching into Emacs.

#+begin_src emacs-lisp
(use-package fzf
  :bind
    ;; Don't forget to set keybinds!
  :config
  (setq fzf/args "-x --color bw --print-query --margin=1,0 --no-hscroll"
        fzf/executable "fzf"
        fzf/git-grep-args "-i --line-number %s"
        ;; command used for `fzf-grep-*` functions
        ;; example usage for ripgrep:
        ;; fzf/grep-command "rg --no-heading -nH"
        fzf/grep-command "grep -nrH"
        ;; If nil, the fzf buffer will appear at the top of the window
        fzf/position-bottom t
        fzf/window-height 15))
#+end_src

** Exec Path From Shell
Ensures that Emacs inherits the correct environment variables from the shell.

#+begin_src emacs-lisp
(use-package exec-path-from-shell
  :ensure t
  :config
  (when (memq window-system '(mac ns x))
    (exec-path-from-shell-initialize)))
#+end_src

** Electric
Enables automatic pairing of brackets and quotes.

#+begin_src emacs-lisp
(use-package electric
  :ensure t
  :config
  (electric-pair-mode 1))
#+end_src

** Company
Provides context-aware autocompletion.

#+begin_src emacs-lisp
(use-package company
  :ensure t
  :init
  (add-hook 'after-init-hook 'global-company-mode)
  :config
  (setq company-idle-delay 0.2
        company-minimum-prefix-length 1
        company-show-numbers t
        company-tooltip-align-annotations t
        company-tooltip-flip-when-above t))
#+end_src

** Helm
Enhances navigation and command execution with fuzzy matching.

#+begin_src emacs-lisp
  (use-package helm
    :ensure t
    :bind
    ("C-x C-f" . 'helm-find-files)
    ("C-x C-b" . 'helm-buffers-list)
    ("M-x" . 'helm-M-x)
    :config
    (defun daedreth/helm-hide-minibuffer ()
      (when (with-helm-buffer helm-echo-input-in-header-line)
        (let ((ov (make-overlay (point-min) (point-max) nil nil t)))
          (overlay-put ov 'window (selected-window))
          (overlay-put ov 'face
                       (let ((bg-color (face-background 'default nil)))
                         `(:background ,bg-color :foreground ,bg-color)))
          (setq-local cursor-type nil))))
    (add-hook 'helm-minibuffer-set-up-hook 'daedreth/helm-hide-minibuffer)
    (setq helm-autoresize-max-height 0
          helm-autoresize-min-height 40
          helm-M-x-fuzzy-match t
          helm-buffers-fuzzy-matching t
          helm-recentf-fuzzy-match t
          helm-semantic-fuzzy-match t
          helm-imenu-fuzzy-match t
          helm-split-window-in-side-p nil
          helm-move-to-line-cycle-in-source nil
          helm-ff-search-library-in-sexp t
          helm-scroll-amount 8 
          helm-echo-input-in-header-line t)
    :init
    (helm-mode 1))

  (helm-autoresize-mode 1)
  (define-key helm-find-files-map (kbd "C-b") 'helm-find-files-up-one-level)
  (define-key helm-find-files-map (kbd "C-f") 'helm-execute-persistent-action)
#+end_src

** Eglot
Integrates language server protocol (LSP) support for better programming language features.

#+begin_src emacs-lisp
(use-package eglot
  :ensure t
  :defer t
  :hook
  (go-mode . eglot-ensure)
  (python-mode . eglot-ensure))
#+end_src

** Treesitter
Enables advanced syntax highlighting and code parsing.

#+begin_src emacs-lisp
  ;; Tree-sitter for enhanced syntax highlighting
(use-package tree-sitter
  :hook ((python-mode . tree-sitter-mode)
           (python-mode . tree-sitter-hl-mode)
           (go-mode . tree-sitter-mode)
           (go-mode . tree-sitter-hl-mode)
           (rust-mode . tree-sitter-mode)
           (rust-mode . tree-sitter-hl-mode)))

    (use-package tree-sitter-langs
      :ensure t
      :after tree-sitter)
#+end_src

* Languages
This section provides language-specific configurations for Python, Go, Rust, and more.

** Python
Configures Python development with LSP, virtual environments, and formatting tools.

Install python-lsp server.

#+begin_src sh
  pip3 install --user "python-language-server[all]"   
  pip3 install -U setuptools
  pip3 install pyright or
  snap install pyright --classic
#+end_src

*** pyright

#+begin_src emacs-lisp
(use-package lsp-pyright
  :hook
  (python-mode . (lambda ()
                   (require 'lsp-pyright)
                   (lsp-deferred))))
#+end_src

*** pyenv
Strongly recommend to use python virtualenv to python work properly in emacs.

Assuming venvs are installed here ~/.venvs

Learn about setting python virtual env below

https://blog.fredrikmeyer.net/2020/08/26/emacs-python-venv.html

https://ddavis.io/posts/emacs-python-lsp

You can use M-x pyvenv-activate to activate specific venv

#+begin_src emacs-lisp
(use-package pyvenv
  :ensure t
  :init
  (setenv "WORKON_HOME" "~/.venvs/")
  :config
  ;; (pyvenv-mode t)

  ;; Set correct Python interpreter
  (setq pyvenv-post-activate-hooks
        (list (lambda ()
                (setq python-shell-interpreter (concat pyvenv-virtual-env "bin/python")))))
  (setq pyvenv-post-deactivate-hooks
        (list (lambda ()
                (setq python-shell-interpreter "python3")))))
#+end_src

*** formatting

#+begin_src emacs-lisp
(use-package blacken
  :init
  (setq-default blacken-fast-unsafe t)
  (setq-default blacken-line-length 80))
#+end_src

*** python-mode

#+begin_src emacs-lisp
    (use-package python-mode
      :hook
      (python-mode . pyvenv-mode)
      (python-mode . flycheck-mode)
      (python-mode . company-mode)
      (python-mode . blacken-mode)
      (python-mode . yas-minor-mode)
      :custom
      ;; NOTE: Set these if Python 3 is called "python3" on your system!
      (python-shell-interpreter "python3")
      :config)
#+end_src

** Golang
Sets up Go development with `gopls` and other tools.

If you see error gopls not able to find module in your workspace 

#+begin_src sh
M-x lsp-describe-session
M-x lsp-workspace-folders-remove
M-x lsp-workspace-folders-add
#+end_src

#+begin_src sh
# GO Path
export GOROOT=/usr/local/go
export GOPATH=$HOME/Code/go
export PATH=$PATH:$GOROOT/bin:$GOPATH/bin
#+end_src

Install go packages and gopls 

#+begin_src sh
go install github.com/nsf/gocode@latest
go install github.com/rogpeppe/godef@latest
go install golang.org/x/tools/cmd/goimports@latest
go install golang.org/x/tools/gopls@latest
go install golang.org/x/tools/cmd/godoc@latest
go install golang.org/x/lint/golint@latest
#+end_src

#+begin_src emacs-lisp
(use-package go-mode
    :ensure t)
#+end_src

#+begin_src emacs-lisp
(setq exec-path (append exec-path '("/usr/local/go/bin/go")))
#+end_src

#+begin_src emacs-lisp
  (setq gofmt-command "goimports")
  (add-hook 'before-save-hook 'gofmt-before-save)
#+end_src

** Clojure
Configures Clojure development with `cider` and `clj-refactor`.

#+begin_src emacs-lisp
(use-package clojure-mode
   :defer t
   :ensure t)

(use-package cider
  :ensure t)

(use-package clj-refactor
  :ensure t
  :config
  (add-hook 'clojure-mode-hook (lambda ()
                                (clj-refactor-mode 1)
                                ))
  (cljr-add-keybindings-with-prefix "C-c C-m")
  (setq cljr-warn-on-eval nil)
   :bind ("C-c '" . hydra-cljr-help-menu/body))   
#+end_src

** Bash
Enhances shell scripting with autocompletion and syntax checking.

#+begin_src emacs-lisp
(add-hook 'shell-mode-hook 'yas-minor-mode)
(add-hook 'shell-mode-hook 'flycheck-mode)
(add-hook 'shell-mode-hook 'company-mode)

(defun shell-mode-company-init ()
  (setq-local company-backends '((company-shell
                                  company-shell-env
                                  company-etags
                                  company-dabbrev-code))))

(use-package company-shell
  :ensure t
  :config
    (require 'company)
    (add-hook 'shell-mode-hook 'shell-mode-company-init))
#+end_src

#+begin_src emacs-lisp
(add-hook 'emacs-lisp-mode-hook 'eldoc-mode)
(add-hook 'emacs-lisp-mode-hook 'yas-minor-mode)
(add-hook 'emacs-lisp-mode-hook 'company-mode)

(use-package slime
  :ensure t
  :config
  (setq inferior-lisp-program "/usr/bin/sbcl")
  (setq slime-contribs '(slime-fancy)))

(use-package slime-company
  :ensure t
  :init
    (require 'company)
    (slime-setup '(slime-fancy slime-company)))
#+end_src

** Rust
Configures Rust development with `rust-mode` and `cargo`.

#+begin_src emacs-lisp
  (use-package rust-mode
    :ensure t
    :hook
    (rust-mode . eglot-ensure)
    :config
    (setq rust-format-on-save t))

  (use-package cargo
    :ensure t
    :hook (rust-mode . cargo-minor-mode))

#+end_src

* Org-Mode
This section enhances `org-mode` with custom bullets, visual improvements, and additional settings.

** Org Bullets
Replaces default bullets with visually appealing symbols.

#+begin_src emacs-lisp
(use-package org-bullets
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))
#+end_src

** Common Setting
Includes general settings for `org-mode`, such as ellipsis and fontification.

Some common setting

#+begin_src emacs-lisp
  (setq org-ellipsis " ")
  (setq org-src-fontify-natively t)
  (setq org-src-tab-acts-natively t)
  (setq org-confirm-babel-evaluate nil)
  (setq org-export-with-smart-quotes t)
  (setq org-src-window-setup 'current-window)
  (add-hook 'org-mode-hook 'org-indent-mode)
#+end_src

** Line Wrap
Enables visual line wrapping in `org-mode`.

Wrap a line

#+begin_src emacs-lisp
  (add-hook 'org-mode-hook
              (lambda ()
                 (visual-line-mode 1)))
#+end_src

** Diminish
Hides minor mode indicators in the modeline to reduce clutter.

#+begin_src emacs-lisp
(use-package diminish
    :ensure t
    :init
    (diminish 'which-key-mode)
    (diminish 'linum-relative-mode)
    (diminish 'hungry-delete-mode)
    (diminish 'visual-line-mode)
    (diminish 'subword-mode)
    (diminish 'beacon-mode)
    (diminish 'irony-mode)
    (diminish 'page-break-lines-mode)
    (diminish 'auto-revert-mode)
    (diminish 'rainbow-delimiters-mode)
    (diminish 'rainbow-mode)
    (diminish 'yas-minor-mode)
    (diminish 'flycheck-mode)
    (diminish 'helm-mode))  
#+end_src

* Infrastructure
This section includes configurations for working with JSON, YAML, Docker, Kubernetes, and Terraform files.

** Json
Configures `json-mode` for editing JSON files.

#+begin_src emacs-lisp
  (use-package json-mode
     :ensure t
     :config
     (customize-set-variable 'json-mode-hook
                               (lambda ()
                                   (setq tab-width 2))))
#+end_src

** Yaml
Adds support for YAML files with `yaml-mode`.

#+begin_src emacs-lisp 
  (use-package yaml-mode
       :ensure t)
#+end_src

** Docker
Provides tools for managing Docker containers and images.

#+begin_src emacs-lisp
  (use-package docker
       :ensure t
       :bind (("C-c d c" . docker-containers)
              ("C-c d i" . docker-images)))
#+end_src

** Dockerfile
Adds syntax highlighting for Dockerfiles.

#+begin_src emacs-lisp
  (use-package dockerfile-mode
      :ensure t)
#+end_src

** Kubernetes
Configures tools for managing Kubernetes resources.

#+begin_src emacs-lisp
   (use-package kubernetes
     :ensure t
     :commands (kubernetes-overview))
#+end_src

#+begin_src emacs-lisp 
  (use-package k8s-mode
    :ensure t
    :hook (k8s-mode . yas-minor-mode))
#+end_src

** Terraform
Adds support for editing Terraform configuration files.

#+begin_src emacs-lisp 
  (use-package terraform-mode
      :ensure t)
#+end_src

* File Management
This section enhances file management in Emacs with Dired and related packages.

#+begin_src emacs-lisp

(use-package dired
  :ensure nil
  :commands (dired dired-jump)
  :bind (("C-x C-j" . dired-jump))
  :custom ((dired-listing-switches "-agho --group-directories-first")))

(use-package dired-single
  :commands (dired dired-jump))

(use-package all-the-icons-dired
  :hook (dired-mode . all-the-icons-dired-mode))

(use-package dired-open
  :commands (dired dired-jump)
  :config
  ;; Doesn't work as expected!
  ;;(add-to-list 'dired-open-functions #'dired-open-xdg t)
  (setq dired-open-extensions '(("png" . "feh")
                                ("mkv" . "mpv"))))

(use-package dired-hide-dotfiles
  :hook (dired-mode . dired-hide-dotfiles-mode))

#+end_src
